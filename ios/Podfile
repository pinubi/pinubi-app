require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")

require 'json'
podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}

ENV['RCT_NEW_ARCH_ENABLED'] = '0' if podfile_properties['newArchEnabled'] == 'false'
ENV['EX_DEV_CLIENT_NETWORK_INSPECTOR'] = podfile_properties['EX_DEV_CLIENT_NETWORK_INSPECTOR']

platform :ios, podfile_properties['ios.deploymentTarget'] || '15.1'
install! 'cocoapods',
  :deterministic_uuids => false

prepare_react_native_project!

target 'pinubiapp' do
  use_expo_modules!

  if ENV['EXPO_USE_COMMUNITY_AUTOLINKING'] == '1'
    config_command = ['node', '-e', "process.argv=['', '', 'config'];require('@react-native-community/cli').run()"];
  else
    config_command = [
      'npx',
      'expo-modules-autolinking',
      'react-native-config',
      '--json',
      '--platform',
      'ios'
    ]
  end

# @generated begin react-native-maps - expo prebuild (DO NOT MODIFY) sync-e9cc66c360abe50bc66d89fffb3c55b034d7d369
  pod 'react-native-google-maps', path: File.dirname(`node --print "require.resolve('react-native-maps/package.json')"`)
# @generated end react-native-maps
  config = use_native_modules!(config_command)

  use_frameworks! :linkage => podfile_properties['ios.useFrameworks'].to_sym if podfile_properties['ios.useFrameworks']
  use_frameworks! :linkage => ENV['USE_FRAMEWORKS'].to_sym if ENV['USE_FRAMEWORKS']

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => podfile_properties['expo.jsEngine'] == nil || podfile_properties['expo.jsEngine'] == 'hermes',
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/..",
    :privacy_file_aggregation_enabled => podfile_properties['apple.privacyManifestAggregationEnabled'] != 'false',
  )

  post_install do |installer|
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      :ccache_enabled => podfile_properties['apple.ccacheEnabled'] == 'true',
    )

    # This is necessary for Xcode 14, because it signs resource bundles by default
    # when building for devices.
    installer.target_installation_results.pod_target_installation_results
      .each do |pod_name, target_installation_result|
      target_installation_result.resource_bundle_targets.each do |resource_bundle_target|
        resource_bundle_target.build_configurations.each do |config|
          config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
        end
      end
    end

    # Fix for missing Hermes dSYM files in archive builds
    # This prevents the "archive did not include a dSYM for hermes.framework" error
    installer.pods_project.targets.each do |target|
      if target.name == 'hermes-engine'
        target.build_configurations.each do |config|
          # Disable dSYM generation for Hermes in release builds since pre-built frameworks don't include them
          config.build_settings['DEBUG_INFORMATION_FORMAT'] = 'dwarf'
          config.build_settings['ONLY_ACTIVE_ARCH'] = 'NO'
        end
      end
    end

    # Add build script to handle Hermes dSYM files for the main app target
    installer.pods_project.targets.each do |target|
      if target.name == 'pinubiapp'
        # Add a build phase to copy Hermes dSYM files
        existing_script = target.build_phases.find { |phase| phase.display_name == 'Copy Hermes dSYM' }
        unless existing_script
          script_phase = target.new_shell_script_build_phase('Copy Hermes dSYM')
          script_phase.shell_script = <<-SCRIPT
            # Only run during archive builds
            if [ "$ACTION" = "install" ] && [ "$CONFIGURATION" = "Release" ]; then
              echo "🔧 Handling Hermes dSYM for archive build..."
              SCRIPT_PATH="$PROJECT_DIR/scripts/copy-hermes-dsym.sh"
              if [ -f "$SCRIPT_PATH" ]; then
                bash "$SCRIPT_PATH"
              else
                echo "⚠️  Hermes dSYM script not found at $SCRIPT_PATH"
                # Create a minimal dSYM structure to prevent archive errors
                HERMES_DSYM_PATH="$DWARF_DSYM_FOLDER_PATH/hermes.framework.dSYM"
                if [ ! -d "$HERMES_DSYM_PATH" ]; then
                  mkdir -p "$HERMES_DSYM_PATH/Contents/Resources/DWARF"
                  echo '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist><plist version="1.0"><dict><key>CFBundleIdentifier</key><string>com.apple.xcode.dsym.hermes.framework</string></dict></plist>' > "$HERMES_DSYM_PATH/Contents/Info.plist"
                  echo "✅ Created minimal Hermes dSYM structure"
                fi
              fi
            fi
          SCRIPT
          script_phase.run_only_for_deployment_postprocessing = false
        end
      end
    end

    # Fix build script warnings by adding output files to prevent running on every build
    installer.pods_project.targets.each do |target|
      target.build_phases.each do |phase|
        if phase.is_a?(Xcodeproj::Project::Object::PBXShellScriptBuildPhase)
          # Fix Hermes script phase
          if phase.display_name&.include?('[Hermes] Replace Hermes for the right configuration')
            puts "🔧 Adding output files to Hermes script phase to optimize builds"
            phase.output_files ||= []
            phase.output_files << "${PODS_XCFRAMEWORKS_BUILD_DIR}/hermes-engine/Pre-built/hermes.framework"
          end
          
          # Fix expo-updates script phase - disable dependency analysis to eliminate warning
          if target.name == 'EXUpdates' && phase.display_name&.include?('Generate updates resources for expo-updates')
            puts "🔧 Configuring expo-updates script phase to eliminate build warning"
            
            # The simplest fix: disable dependency analysis (equivalent to unchecking "Based on dependency analysis")
            # This tells Xcode to run this script when needed without warning about missing outputs
            phase.run_only_for_deployment_postprocessing = false
            
            # Add a dummy output file to satisfy Xcode's requirement
            phase.output_files = ["${SCRIPT_OUTPUT_FILE_0}"]
            
            # Modify script to create the dummy output file
            original_script = phase.shell_script || ""
            unless original_script.include?("SCRIPT_OUTPUT_FILE_0")
              phase.shell_script = original_script + <<-SCRIPT_APPEND

# Create output file to satisfy Xcode dependency analysis
echo "expo-updates resource generation completed" > "${SCRIPT_OUTPUT_FILE_0}"
SCRIPT_APPEND
            end
            
            puts "✅ Configured expo-updates script to run without dependency warnings"
          end

          # Alternative approach: Add a completion marker file for any remaining problematic scripts
          if (phase.output_files.nil? || phase.output_files.empty?) && 
             phase.display_name&.include?('[CP-User]') && 
             !phase.shell_script&.include?('echo "SUCCESS"')
            
            phase.output_files ||= []
            marker_file = "${TEMP_FILE_DIR}/#{target.name.gsub(/[^a-zA-Z0-9]/, '_')}_#{phase.display_name&.gsub(/[^a-zA-Z0-9]/, '_') || 'script'}_completed.marker"
            phase.output_files << marker_file
            
            # Modify the script to create the marker file
            if phase.shell_script && !phase.shell_script.include?('mkdir -p "${TEMP_FILE_DIR}"')
              phase.shell_script = phase.shell_script + "\n# Create completion marker\nmkdir -p \"${TEMP_FILE_DIR}\"\ntouch \"#{marker_file}\""
            end
            
            puts "🔧 Added completion marker to script: #{phase.display_name}"
          end

          # Fix any other script phases that don't have outputs
          if phase.output_files.nil? || phase.output_files.empty?
            case phase.display_name
            when /.*Bundle React Native code and images.*/
              phase.output_files ||= []
              phase.output_files << "${BUILT_PRODUCTS_DIR}/${WRAPPER_NAME}/main.jsbundle"
            when /.*Copy Bundle Resources.*/
              # These typically have implicit outputs, no need to add
            when /.*Run Script.*/, /.*\[CP-User\].*/
              # Add a generic output file if none exists to prevent warnings
              unless phase.shell_script&.include?('echo') && phase.shell_script.length < 50
                phase.output_files ||= []
                phase.output_files << "${TEMP_FILE_DIR}/#{target.name}-#{phase.display_name&.gsub(/[^a-zA-Z0-9]/, '_') || 'script'}-completed.txt"
              end
            end
          end
        end
      end
    end
  end
end
