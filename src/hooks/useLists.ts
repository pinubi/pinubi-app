import { useAuth } from '@/hooks/useAuth';
import { useListsStore } from '@/store/listsStore';
import type { ListFormData } from '@/types/lists';
import { useEffect } from 'react';

/**
 * Hook for managing user lists
 * Automatically fetches lists when user is authenticated
 */
export const useLists = () => {
  const { user, isAuthenticated } = useAuth();
  const {
    lists,
    loading,
    error,
    fetchUserLists,
    createList,
    updateList,
    deleteList,
    clearError,
    refreshLists,
    getListById,
    getListsByVisibility,
  } = useListsStore();

  // Auto-fetch lists when user is authenticated
  useEffect(() => {
    if (isAuthenticated && user?.id) {
      console.log('ðŸŽ£ useLists: Auto-fetching lists for user:', user.id);
      fetchUserLists(user.id);
    }
  }, [isAuthenticated, user?.id, fetchUserLists]);

  // Refresh function that uses current user
  const refresh = async () => {
    if (user?.id) {
      await refreshLists(user.id);
    }
  };

  // Create list function that automatically passes userId
  const createListWithUser = async (listData: ListFormData) => {
    if (!user?.id) {
      throw new Error('User not authenticated');
    }
    return await createList(listData, user.id);
  };

  // Update list function that automatically passes userId
  const updateListWithUser = async (listId: string, listData: Partial<ListFormData>) => {
    if (!user?.id) {
      throw new Error('User not authenticated');
    }
    return await updateList(listId, listData, user.id);
  };

  return {
    // State
    lists,
    loading,
    error,
    
    // Actions
    createList: createListWithUser,
    updateList: updateListWithUser,
    deleteList,
    refresh,
    clearError,
    
    // Helpers
    getListById,
    getListsByVisibility,
    
    // Computed
    privateLists: getListsByVisibility('private'),
    publicLists: getListsByVisibility('public'),
    hasLists: lists.length > 0,
    
    // Auto-generated lists helpers
    favoritesList: lists.find(list => list.autoListType === 'favorites'),
    wantToVisitList: lists.find(list => list.autoListType === 'want_to_visit'),
    customLists: lists.filter(list => !list.isAutoGenerated),
  };
};
