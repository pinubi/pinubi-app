/**
 * SCRIPT DE TESTE - TRIGGERS DE LISTA
 * 
 * Demonstra como os triggers automáticos funcionam quando listas
 * são criadas ou compradas diretamente pelo client-side no Firestore
 */

const admin = require('firebase-admin');

// Configurar Firebase Admin
admin.initializeApp({
  projectId: 'demo-pinubi-functions',
  databaseURL: 'http://localhost:8080'
});

const db = admin.firestore();

// Conectar ao emulador
if (process.env.NODE_ENV !== 'production') {
  process.env.FIRESTORE_EMULATOR_HOST = 'localhost:8080';
  process.env.FIREBASE_AUTH_EMULATOR_HOST = 'localhost:9099';
}

async function testListTriggers() {
  console.log('🧪 Testando triggers automáticos de lista...\n');

  try {
    // 1. Criar usuário de teste
    console.log('📝 Criando usuário de teste...');
    await createTestUser();

    // 2. Simular criação de lista pelo client-side
    console.log('📋 Simulando criação de lista pelo client-side...');
    const listId = await simulateClientSideListCreation();

    // 3. Aguardar trigger processar
    console.log('⏳ Aguardando trigger onListCreated processar...');
    await sleep(2000);

    // 4. Verificar se atividade foi criada
    console.log('🔍 Verificando se atividade list_created foi criada...');
    await checkListCreatedActivity(listId);

    // 5. Simular compra de lista
    console.log('💰 Simulando compra de lista...');
    const purchaseId = await simulateListPurchase(listId);

    // 6. Aguardar trigger processar
    console.log('⏳ Aguardando trigger onPurchaseCreated processar...');
    await sleep(2000);

    // 7. Verificar se atividade de compra foi criada
    console.log('🔍 Verificando se atividade list_purchased foi criada...');
    await checkListPurchasedActivity(purchaseId);

    // 8. Simular monetização de lista
    console.log('💎 Simulando monetização de lista...');
    await simulateListMonetization(listId);

    // 9. Aguardar trigger processar
    console.log('⏳ Aguardando trigger onListUpdated processar...');
    await sleep(2000);

    // 10. Verificar se atividade de monetização foi criada
    console.log('🔍 Verificando se atividade list_monetized foi criada...');
    await checkListMonetizedActivity(listId);

    console.log('\n✅ Todos os triggers testados com sucesso!');

  } catch (error) {
    console.error('❌ Erro nos testes:', error);
  }
}

async function createTestUser() {
  const userId = 'user_trigger_test_1';
  const userData = {
    id: userId,
    email: 'trigger-test@pinubi.com',
    displayName: 'Usuário Trigger Test',
    accountType: 'premium',
    profileVisibility: 'public',
    isValidated: true,
    isActive: true,
    following: [],
    followers: [],
    preferences: {
      categories: ['restaurants', 'coffee'],
      priceRange: [2, 4]
    },
    location: {
      country: 'Brazil',
      state: 'SP',
      city: 'São Paulo',
      coordinates: {
        lat: -23.5505,
        lng: -46.6333
      }
    },
    createdAt: admin.firestore.Timestamp.now()
  };

  await db.collection('users').doc(userId).set(userData);
  console.log(`   ✓ Usuário criado: ${userData.displayName}`);
}

async function simulateClientSideListCreation() {
  // Simular como o client-side criaria uma lista diretamente no Firestore
  const listId = 'list_trigger_test_' + Date.now();
  const listData = {
    id: listId,
    title: 'Melhores Cafés de SP',
    emoji: '☕',
    description: 'Lista criada pelo client-side para testar triggers',
    ownerId: 'user_trigger_test_1',
    visibility: 'public',
    editors: [],
    isMonetized: false,
    price: 0,
    purchasedBy: [],
    placesCount: 0,
    tags: ['coffee', 'sao-paulo', 'work'],
    category: 'restaurants',
    
    // Campos importantes para trigger
    isSystemList: false,
    isAutoGenerated: false,
    canDelete: true,
    canRename: true,
    autoListType: '',
    
    createdAt: admin.firestore.Timestamp.now(),
    updatedAt: admin.firestore.Timestamp.now(),
    regions: ['SP', 'São Paulo']
  };

  // Criar lista diretamente no Firestore (como faria o client-side)
  await db.collection('lists').doc(listId).set(listData);
  console.log(`   ✓ Lista criada via client-side: ${listData.title} (${listId})`);
  
  return listId;
}

async function checkListCreatedActivity(listId) {
  // Buscar atividade gerada pelo trigger
  const activitiesSnapshot = await db.collection('activities')
    .where('type', '==', 'list_created')
    .where('data.listId', '==', listId)
    .limit(1)
    .get();

  if (activitiesSnapshot.empty) {
    console.log('   ❌ Atividade list_created NÃO foi criada');
    return false;
  }

  const activity = activitiesSnapshot.docs[0].data();
  console.log('   ✅ Atividade list_created criada com sucesso!');
  console.log(`      📋 Lista: ${activity.data.listName}`);
  console.log(`      👤 Autor: ${activity.userId}`);
  console.log(`      🏷️ Tags: ${activity.data.tags.join(', ')}`);
  console.log(`      👁️ Público: ${activity.isPublic}`);
  
  return true;
}

async function simulateListPurchase(listId) {
  // Primeiro, tornar a lista monetizada
  await db.collection('lists').doc(listId).update({
    isMonetized: true,
    price: 990, // R$ 9,90
    updatedAt: admin.firestore.Timestamp.now()
  });

  // Simular compra criada pelo sistema de pagamento
  const purchaseId = 'purchase_trigger_test_' + Date.now();
  const purchaseData = {
    id: purchaseId,
    userId: 'user_trigger_test_1', // Mesmo usuário comprando própria lista (só para teste)
    listId: listId,
    
    // Dados do pagamento
    stripePaymentIntentId: 'pi_test_123456',
    amount: 990, // Em centavos
    currency: 'brl',
    status: 'completed', // Importante: só gera atividade se completed
    
    // Dados do vendedor
    sellerId: 'user_trigger_test_1',
    sellerRevenue: 792, // 80%
    platformFee: 198,   // 20%
    
    // Snapshot da lista (preservar conteúdo)
    listSnapshot: {
      title: 'Melhores Cafés de SP',
      places: [],
      createdAt: admin.firestore.Timestamp.now()
    },
    
    createdAt: admin.firestore.Timestamp.now()
  };

  // Criar compra diretamente no Firestore
  await db.collection('purchases').doc(purchaseId).set(purchaseData);
  console.log(`   ✓ Compra simulada: ${purchaseId} (R$ ${purchaseData.amount / 100})`);
  
  return purchaseId;
}

async function checkListPurchasedActivity(purchaseId) {
  // Buscar atividade gerada pelo trigger
  const activitiesSnapshot = await db.collection('activities')
    .where('type', '==', 'list_purchased')
    .where('data.listId', '==', 'list_trigger_test_' + purchaseId.split('_')[3]) // Extrair listId
    .limit(1)
    .get();

  if (activitiesSnapshot.empty) {
    console.log('   ❌ Atividade list_purchased NÃO foi criada');
    return false;
  }

  const activity = activitiesSnapshot.docs[0].data();
  console.log('   ✅ Atividade list_purchased criada com sucesso!');
  console.log(`      💰 Lista: ${activity.data.listName}`);
  console.log(`      💵 Preço: R$ ${activity.data.price / 100}`);
  console.log(`      👤 Comprador: ${activity.userId}`);
  console.log(`      🏪 Vendedor: ${activity.data.sellerId}`);
  
  return true;
}

async function simulateListMonetization(listId) {
  // Simular lista que não era monetizada virando monetizada
  await db.collection('lists').doc(listId).update({
    isMonetized: true,
    price: 1990, // R$ 19,90
    updatedAt: admin.firestore.Timestamp.now()
  });

  console.log(`   ✓ Lista monetizada: R$ 19,90`);
}

async function checkListMonetizedActivity(listId) {
  // Buscar atividade gerada pelo trigger
  const activitiesSnapshot = await db.collection('activities')
    .where('type', '==', 'list_monetized')
    .where('data.listId', '==', listId)
    .limit(1)
    .get();

  if (activitiesSnapshot.empty) {
    console.log('   ❌ Atividade list_monetized NÃO foi criada');
    return false;
  }

  const activity = activitiesSnapshot.docs[0].data();
  console.log('   ✅ Atividade list_monetized criada com sucesso!');
  console.log(`      💎 Lista: ${activity.data.listName}`);
  console.log(`      💰 Preço: R$ ${activity.data.price / 100}`);
  console.log(`      👤 Dono: ${activity.userId}`);
  
  return true;
}

function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// Função de limpeza
async function cleanup() {
  console.log('\n🧹 Limpando dados de teste...');
  
  const batch = db.batch();

  // Limpar usuário
  batch.delete(db.collection('users').doc('user_trigger_test_1'));

  // Limpar listas (buscar por padrão)
  const listsSnapshot = await db.collection('lists')
    .where('ownerId', '==', 'user_trigger_test_1')
    .get();
  
  listsSnapshot.docs.forEach(doc => {
    batch.delete(doc.ref);
  });

  // Limpar compras
  const purchasesSnapshot = await db.collection('purchases')
    .where('userId', '==', 'user_trigger_test_1')
    .get();
  
  purchasesSnapshot.docs.forEach(doc => {
    batch.delete(doc.ref);
  });

  // Limpar atividades
  const activitiesSnapshot = await db.collection('activities')
    .where('userId', '==', 'user_trigger_test_1')
    .get();
  
  activitiesSnapshot.docs.forEach(doc => {
    batch.delete(doc.ref);
  });

  await batch.commit();
  console.log('✅ Limpeza concluída');
}

// Executar testes
if (require.main === module) {
  testListTriggers()
    .then(() => cleanup())
    .catch(console.error)
    .finally(() => process.exit(0));
}

module.exports = { testListTriggers, cleanup };
