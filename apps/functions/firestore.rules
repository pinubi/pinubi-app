rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ====================
    // FUNÇÕES AUXILIARES
    // ====================
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    function isUserPremium() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accountType == 'premium';
    }
    
    function isUserFree() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accountType == 'free';
    }
    
    function isFollowing(userId) {
      return isAuthenticated() && 
             userId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.following;
    }

    // Verificar se usuário está validado (passou pelo sistema de convites)
    function isUserValidated() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isValidated == true && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isActive == true;
    }

    // Verificar se usuário está em processo de onboarding (pode criar/atualizar próprio perfil)
    function isUserInOnboarding() {
      return isAuthenticated() && 
             (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isValidated != true || 
              get(/databases/$(database)/documents/users/$(request.auth.uid)).data.onboardingComplete != true);
    }

    // Verificar se pode editar uma lista
    function canEditList(listData) {
      return isOwner(listData.ownerId) ||
             (listData.editors != null && 
              listData.editors.hasAny(['userId', '==', request.auth.uid]));
    }
    
    // Verificar se pode editar lista com permissão específica
    function canEditListWithPermission(listData, requiredPermission) {
      return isOwner(listData.ownerId) ||
             (listData.editors != null && 
              listData.editors.hasAny(['userId', '==', request.auth.uid]) &&
              listData.editors.hasAny(['permission', '==', requiredPermission]));
    }
    
    // Função mais segura para verificar validação do usuário
    function isUserValidatedSafe() {
      return isAuthenticated() && 
             request.auth.uid != null &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isValidated == true && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isActive == true;
    }

    // ====================
    // COLEÇÃO USERS
    // ====================
    
    match /users/{userId} {
      // Leitura: 
      // - Próprio perfil sempre (para onboarding)
      // - Perfis públicos sempre se usuário validado
      // - Perfis privados apenas se seguindo
      allow read: if isOwner(userId) ||
                     (isUserValidated() && resource.data.profileVisibility == 'public') ||
                     (isUserValidated() && resource.data.profileVisibility == 'private' && isFollowing(userId));
      
      // Criação: 
      // - Usuários podem criar perfil durante signup
      allow create: if isOwner(userId) && isAuthenticated();
      
      // Atualização:
      // - Durante onboarding: próprio perfil (dados básicos)
      // - Após validação: próprio perfil (todos os dados exceto críticos)
      allow update: if isOwner(userId) &&
                       (// Durante onboarding: apenas campos básicos
                        (isUserInOnboarding() && 
                         !request.resource.data.diff(resource.data).affectedKeys()
                          .hasAny(['isValidated', 'isActive', 'invitedBy', 'inviteCode', 'invitesUsed', 'maxInvites', 'aiCredits', 'accountType'])) ||
                        // Após validação: campos normais (exceto críticos)
                        (isUserValidated() && 
                         !request.resource.data.diff(resource.data).affectedKeys()
                          .hasAny(['createdAt', 'inviteCode', 'invitedBy', 'invitesUsed', 'maxInvites', 'isValidated'])));
      
      // Exclusão: não permitida (soft delete via campo isActive)
      allow delete: if false;
    }

    // ====================
    // COLEÇÃO PROFILES
    // ====================
    
    match /profiles/{userId} {
      // Leitura: apenas usuários validados podem ver perfis
      allow read: if isUserValidated();
      
      // Criação/Atualização/Exclusão: apenas sistema (via Cloud Functions)
      allow create, update, delete: if false;
    }

    // ====================
    // COLEÇÃO USER-SETTINGS
    // ====================
    
    match /user-settings/{userId} {
      // Leitura e atualização: apenas próprio usuário validado
      allow read, update: if isOwner(userId) && isUserValidated();
      
      // Criação e exclusão: apenas sistema
      allow create, delete: if false;
    }

    // ====================
    // COLEÇÃO LISTS
    // ====================
    
    match /lists/{listId} {
      // Leitura: apenas usuários validados
      allow read: if isUserValidatedSafe() &&
                     (resource.data.visibility == 'public' ||
                      isOwner(resource.data.ownerId) ||
                      (resource.data.editors != null && 
                       resource.data.editors.hasAny(['userId', '==', request.auth.uid])) ||
                      (resource.data.isMonetized == true && 
                       resource.data.purchasedBy != null &&
                       request.auth.uid in resource.data.purchasedBy));
      
      // Criação: usuários validados respeitando limites
      allow create: if isUserValidatedSafe() &&
                       isOwner(request.resource.data.ownerId) &&
                       // Free: máximo 5 listas (exceto automáticas)
                       (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accountType == 'premium' || 
                        request.resource.data.isAutoGenerated == true ||
                        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accountType == 'free' && 
                         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.listsCount < 5));
      
      // Atualização: apenas usuários validados que podem editar
      allow update: if isUserValidatedSafe() &&
                       (isOwner(resource.data.ownerId) ||
                        ((resource.data.editors != null && 
                          resource.data.editors.hasAny(['userId', '==', request.auth.uid])) &&
                         // Editores não podem alterar configurações críticas
                         !request.resource.data.diff(resource.data).affectedKeys()
                          .hasAny(['ownerId', 'isMonetized', 'price', 'editors'])));
      
      // Exclusão: apenas usuários validados donos da lista
      allow delete: if isUserValidatedSafe() &&
                       isOwner(resource.data.ownerId) &&
                       (resource.data.canDelete == null || resource.data.canDelete == true);
    }

    // ====================
    // COLEÇÃO PLACES
    // ====================
    
    match /places/{placeId} {
      // Leitura: apenas usuários validados
      allow read: if isAuthenticated();
      
      // Criação: usuários validados podem adicionar lugares
      // Simplificando validação para evitar erros
      allow create: if isAuthenticated() &&
                       request.resource.data.googleData != null &&
                       request.resource.data.coordinates != null;
      
      // Atualização: permitir atualizações específicas e seguras
      allow update: if isAuthenticated() &&
                       // Permite atualizar campos seguros
                       request.resource.data.diff(resource.data).affectedKeys()
                        .hasAny(['socialMetrics', 'averageRatings', 'reviewCount', 'updatedAt', 'lastGoogleSync']);
      
      // Exclusão: não permitida para preservar integridade
      allow delete: if false;
    }

    // ====================
    // COLEÇÃO LISTPLACES
    // ====================
    
    match /listPlaces/{listPlaceId} {
      // Leitura: apenas usuários validados que podem ler a lista
      allow read: if isUserValidatedSafe();
      
      // Criação: versão simplificada e robusta
      allow create: if isUserValidatedSafe() &&
                       request.resource.data.addedBy == request.auth.uid &&
                       request.resource.data.listId != null &&
                       request.resource.data.placeId != null &&
                       // Verificar se é dono da lista (verificação simples)
                       exists(/databases/$(database)/documents/lists/$(request.resource.data.listId)) &&
                       // Verificar se lugar existe
                       exists(/databases/$(database)/documents/places/$(request.resource.data.placeId));
      
      // Atualização: usuários validados
      allow update: if isUserValidatedSafe() &&
                       // Não pode alterar campos críticos
                       !request.resource.data.diff(resource.data).affectedKeys()
                        .hasAny(['listId', 'placeId', 'addedBy']);
      
      // Exclusão: usuários validados
      allow delete: if isUserValidatedSafe();
    }

    // ====================
    // COLEÇÃO REVIEWS
    // ====================
    
    match /reviews/{reviewId} {
      // Leitura: apenas usuários validados
      allow read: if isUserValidated();
      
      // Criação: apenas usuários validados para próprias reviews
      allow create: if isUserValidated() &&
                       isOwner(request.resource.data.userId);
      
      // Atualização: apenas usuários validados para próprias reviews
      allow update: if isUserValidated() &&
                       isOwner(resource.data.userId);
      
      // Exclusão: apenas usuários validados para próprias reviews
      allow delete: if isUserValidated() &&
                       isOwner(resource.data.userId);
    }

    // ====================
    // COLEÇÃO FOLLOWS
    // ====================
    
    match /follows/{followId} {
      // Leitura: apenas usuários validados participantes do relacionamento
      allow read: if isUserValidated() &&
                     (isOwner(resource.data.followerId) || 
                      isOwner(resource.data.followingId));
      
      // Criação: apenas usuários validados
      allow create: if isUserValidated() &&
                       isOwner(request.resource.data.followerId) &&
                       request.resource.data.followerId != request.resource.data.followingId;
      
      // Atualização: quem está sendo seguido pode aceitar/rejeitar pedidos
      allow update: if isUserValidated() &&
                       isOwner(resource.data.followingId) &&
                       // Apenas mudança de status
                       request.resource.data.diff(resource.data).affectedKeys()
                        .hasOnly(['status']);
      
      // Exclusão: usuários validados que estão seguindo
      allow delete: if isUserValidated() &&
                       isOwner(resource.data.followerId);
    }

    // ====================
    // COLEÇÃO FRIENDREQUESTS (REMOVIDA - Integrado ao sistema de follows)
    // ====================
    // As solicitações de amizade agora são tratadas pelo sistema de follows
    // com status: "pending" | "active" | "blocked"

    // ====================
    // COLEÇÃO ACTIVITIES
    // ====================
    
    match /activities/{activityId} {
      // Leitura: próprias atividades ou atividades públicas de quem segue
      allow read: if isUserValidated() &&
                     (isOwner(resource.data.userId) ||
                      (resource.data.isPublic == true && isFollowing(resource.data.userId)));
      
      // Criação, atualização: apenas sistema (via Cloud Functions)
      allow create, update: if false;
      
      // Exclusão: apenas próprias atividades
      allow delete: if isUserValidated() &&
                       isOwner(resource.data.userId);
    }

    // ====================
    // COLEÇÃO MATCHES
    // ====================
    
    match /matches/{matchId} {
      // Leitura: criador e participantes
      allow read: if isUserValidated() &&
                     (isOwner(resource.data.createdBy) ||
                      (resource.data.participants != null && 
                       request.auth.uid in resource.data.participants));
      
      // Criação: usuários validados
      allow create: if isUserValidated() &&
                       isOwner(request.resource.data.createdBy);
      
      // Atualização: criador e participantes (apenas sugestões/votos)
      allow update: if isUserValidated() &&
                       (isOwner(resource.data.createdBy) ||
                        (resource.data.participants != null &&
                         request.auth.uid in resource.data.participants &&
                         // Participantes só podem votar/sugerir
                         request.resource.data.diff(resource.data).affectedKeys()
                          .hasOnly(['suggestions'])));
      
      // Exclusão: apenas criador
      allow delete: if isUserValidated() &&
                       isOwner(resource.data.createdBy);
    }

    // ====================
    // COLEÇÃO VOTATIONS
    // ====================
    
    match /votations/{votationId} {
      // Leitura: todos (via link compartilhável)
      allow read: if true;
      
      // Criação: usuários validados premium ou free com limite
      allow create: if isUserValidated() &&
                       isOwner(request.resource.data.createdBy) &&
                       (isUserPremium() || 
                        (isUserFree() && getUserData().votationsThisMonth < 2));
      
      // Atualização: todos podem votar e sugerir (se permitido)
      allow update: if resource.data.allowSuggestions == true || 
                        // Apenas votação sem adicionar opções
                        !request.resource.data.diff(resource.data).affectedKeys()
                         .hasAny(['options']);
      
      // Exclusão: apenas criador
      allow delete: if isUserValidated() &&
                       isOwner(resource.data.createdBy);
    }

    // ====================
    // COLEÇÃO PURCHASES
    // ====================
    
    match /purchases/{purchaseId} {
      // Leitura: comprador e vendedor
      allow read: if isUserValidated() &&
                     (isOwner(resource.data.buyerId) ||
                      isOwner(resource.data.sellerId));
      
      // Criação, atualização e exclusão: apenas sistema (via Cloud Functions)
      allow create, update, delete: if false;
    }

    // ====================
    // COLEÇÃO NOTIFICATIONS
    // ====================
    
    match /notifications/{notificationId} {
      // Leitura: apenas destinatário validado
      allow read: if isUserValidated() &&
                     isOwner(resource.data.userId);
      
      // Criação: apenas sistema (via Cloud Functions)
      allow create: if false;
      
      // Atualização: apenas destinatário (marcar como lida)
      allow update: if isUserValidated() &&
                       isOwner(resource.data.userId) &&
                       request.resource.data.diff(resource.data).affectedKeys()
                        .hasOnly(['isRead', 'readAt']);
      
      // Exclusão: apenas destinatário
      allow delete: if isUserValidated() &&
                       isOwner(resource.data.userId);
    }

    // ====================
    // COLEÇÃO AIPROMPTS
    // ====================
    
    match /aiPrompts/{promptId} {
      // Leitura: apenas próprios prompts de usuários validados
      allow read: if isUserValidated() &&
                     isOwner(resource.data.userId);
      
      // Criação, atualização: apenas sistema (via Cloud Functions)
      allow create, update: if false;
      
      // Exclusão: apenas próprios prompts
      allow delete: if isUserValidated() &&
                       isOwner(resource.data.userId);
    }

    // ====================
    // REGRAS DE SEGURANÇA PARA PRODUÇÃO
    // ====================
    
    // NOTA: As regras abaixo foram removidas para produção
    // Durante desenvolvimento, todas as regras eram permitidas
    // NUNCA reativar em produção as regras de desenvolvimento
  }
}
